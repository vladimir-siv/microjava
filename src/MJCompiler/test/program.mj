program MJProgram
	int x; int y, z;
	int arr[];
	const int X = 2, Y = 4;
	const char C = '_';
	const bool B = false;

	enum ThingA { FirstThing, SecondThing = 4, ThirdThing, FourthThing = 7 }
	enum ThingB { OneThing = 2, SecondThing, ThreeThing, FourThing }
{
	void prints(char str[], bool convert)
	{
		if (convert)
		{
			if (str[0] == 'a' || str[0] == 'b')
			{
				str[0] = 'A';
			}
			else if (str[0] == 'c' && str[1] != 'c')
			{
				str[0] = 'B';
				str[1] = 'C';
			}
			else str[0] = 'X';

			if (str[1] != 'C') str[1] = 'Z';
		}
		else
		{
			if (str[0] == 'a'|| str[1] != 'a' && str[1] != 'b')
			{
				str[0] = 'A';
				str[1] = 'B';
			}
		}

		print(str[0]);
		print(str[1]);
		print(eol);
	}

	void print2(int ar[], int x, ThingA thing)
	{
		print(ar[0], 3);
		print(ar[1], 3);
		print(x, 3);
		print(thing, 3);
		print(eol);
	}

	int k(int a, int b, ThingB thing) int c, d;
	{
		c = 3;
		c--;
		z = -4;
		z++;
		c = c % a * (-z);
		print(thing, 3);
		return (c - (2 + 2 * (1 + 1) / 2)) * b;
	}

	void main()
		int aa, bb;
		char u; int e;
		bool b;
		ThingA t1; ThingB t2;
		ThingA things[];
		char str[];
		int i, j;
	{
		aa = 5;
		bb = 2;

		b = true;
		u = 'f';

		t1 = ThingA.FourthThing;
		t2 = ThingB.SecondThing;

		read(u);
		read(e);
		e++;

		// PRINT:   1  3 10  5
		y = X;
		print(1, 3);
		x = - 1 + y + 5 + k(aa, X, t2);
		print(x, 3);
		k(5, bb, ThingB.FourThing);
		print(eol);

		// PRINT: _R{u}
		print(C); print('R'); print(u);
		print(eol);

		// PRINT: 011
		print(B); print(true); print(b);
		print(eol);

		// PRINT: {e+1}
		print(e);
		print(eol);

		// PRINT: 04577
		print(ThingA.FirstThing);
		print(ThingA.SecondThing);
		print(ThingA.ThirdThing);
		print(ThingA.FourthThing);
		print(t1);
		print(eol);

		// PRINT: 23345
		print(ThingB.OneThing);
		print(t2);
		print(ThingB.SecondThing);
		print(ThingB.ThreeThing);
		print(ThingB.FourThing);
		print(eol);

		e = 1;

		arr = new int[10];
		arr[0] = 3;
		arr[e] = arr[0] + 2;
		arr[X] = arr[0] * arr[e];

		things = new ThingA[5];
		things[0] = ThingA.ThirdThing;
		things[1] = ThingA.FourthThing;
		things[2] = ThingA.SecondThing;

		str = new char[5];

		str[0] = 'a';
		str[1] = 'b';
		str[2] = 'c';

		// PRINT:   3  5 15 7
		print2(arr, arr[2], things[1]);

		// PRINT: abc
		print(str[0]);
		print(str[1]);
		print(str[2]);
		print(eol);

		// PRINT: !012345
		print('!');
		if (e >= 1) print(0);
		else print(-1);
		if (e > 1) print(-1);
		else print(1);
		if (X <= 3) print(2);
		else print(-1);
		if (4 < x) print(3);
		else print(-1);
		if (arr[0] == e) print(-1);
		else print(4);
		if (e != arr[0]) print(5);
		else print(-1);
		print(eol);

		// PRINT: AC
		str[0] = 'a'; str[1] = 'C';
		prints(str, true);

		// PRINT: AZ
		str[0] = 'b'; str[1] = 'H';
		prints(str, true);

		// PRINT: BC
		str[0] = 'c'; str[1] = 'p';
		prints(str, true);

		// PRINT: XZ
		str[0] = 'r'; str[1] = 'q';
		prints(str, true);

		// PRINT: XZ
		str[0] = 'c'; str[1] = 'c';
		prints(str, true);

		// PRINT: AB
		str[0] = 'a'; str[1] = 'a';
		prints(str, false);

		// PRINT: AB
		str[0] = 'a'; str[1] = 'c';
		prints(str, false);

		// PRINT: AB
		str[0] = 'b'; str[1] = 'c';
		prints(str, false);

		// PRINT: AB
		str[0] = 'a'; str[1] = 'b';
		prints(str, false);

		// PRINT: ea
		str[0] = 'e'; str[1] = 'a';
		prints(str, false);

		// PRINT: 0123456789
		for (i = 0; i < 10; i++) print(i);
		print(eol);

		// PRINT: not so crazy but crazy stuff
		//	3: 456789
        //	4: 45678
        //	5: 4
        //	7: 45
		for (i = 0; ; i++)
		{
			if (i < 3) continue;
			if (i == 8) break;
			if (i == 6) continue;

			print(i); print(':'); print(' ');
			for (j = 0; j < 10; j++)
			{
				if (j <= 3) continue;
				if (j == 13 - i) break;

				print(j);

				if (i == 5) break;
			}

			print(eol);
		}

		// NULL REF EX
		str = null;
		print(str[0]);
		print(eol);
	}
}
