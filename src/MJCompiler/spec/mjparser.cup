package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;
import rs.etf.pp1.mj.runtime.Code;

// #===# [S] GLOBAL #===#

parser code
{:
	boolean errorDetected = false;

	Logger log = Logger.getLogger(getClass());

	public void report_fatal_error(String message, Object info) throws java.lang.Exception
	{
		done_parsing();
		report_error(message, info);
	}

	public void syntax_error(Symbol cur_token)
	{
		report_error("Syntax error", cur_token);
	}

	public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception
	{
		report_fatal_error("Fatal error, parsing cannot continue", cur_token);
	}

	public void report_error(String message, Object info)
	{
		errorDetected = true;

		StringBuilder msg = new StringBuilder(message);

		if (info instanceof Symbol)
		{
			msg
				.append(" on line ")
				.append(((Symbol)info).left);
		}

		log.error(msg.toString());
	}

	public void report_info(String message, Object info)
	{
		StringBuilder msg = new StringBuilder(message);

		if (info instanceof Symbol)
		{
			msg
				.append (" on line ")
				.append(((Symbol)info).left);
		}

		log.info(msg.toString());
	}

:}

init with
{:
	errorDetected = false;
:}

scan with
{:
	Symbol s = this.getScanner().next_token();

	//if (s != null && s.value != null)
	//{
	//	log.info(s.toString() + " " + s.value.toString());
	//}

	return s;
:}

// #===# [E] GLOBAL #===#


// #===# [S] TERMINALS #===#

// Keywords
terminal PROG;
terminal CONST, ENUM;
terminal PRINT, READ;
terminal RETURN, VOID;
terminal NEW, NULL;
terminal CLASS, INTERFACE;
terminal EXTENDS, IMPLEMENTS;
// Constants
terminal Integer INT;
terminal Character CHAR;
terminal Boolean BOOL;
// Identifiers
terminal String IDENT;
// Operators
terminal PLUS, MINUS, MULTIPLY, DIVIDE, MODULO;
terminal EQU, NEQ, GTR, GEQ, LSS, LEQ;
terminal AND, OR;
terminal EQUAL;
terminal INC, DEC;
terminal DOT, COMMA, SEMI;
terminal LPAREN, RPAREN;
terminal LBRACKET, RBRACKET;
terminal LBRACE, RBRACE;
// Control
terminal IF, ELSE;
terminal FOR, BREAK, CONTINUE;

// #===# [E] TERMINALS #===#


// #===# [S] NON TERMINALS #===#

nonterminal rs.etf.pp1.symboltable.concepts.Obj		Program, ProgDecl;

nonterminal	rs.etf.pp1.symboltable.concepts.Struct	ConstValue;

nonterminal											SectionsDecl;
nonterminal											Section;

nonterminal rs.etf.pp1.symboltable.concepts.Struct	Type;
nonterminal											ArrayType;
nonterminal											ArraySize;
nonterminal											Index;

nonterminal											ConstSectList;
nonterminal											ConstSect;
nonterminal											ConstSectDecl;
nonterminal											ConstDeclList;
nonterminal											ConstDecl;

nonterminal											VarSectList;
nonterminal											VarSect;
nonterminal											VarSectDecl;
nonterminal											VarDeclList;
nonterminal											VarDecl;

nonterminal											EnumDecl, EnumReg;
nonterminal											EnumConstDeclList;
nonterminal											EnumConstDecl, EnumOptValue;

nonterminal											IList, IMethodList, InterfaceType;
nonterminal											FieldSectList, FieldSect;
nonterminal	rs.etf.pp1.symboltable.concepts.Obj		ClassDecl, ClassReg;
nonterminal											ClassBody;
nonterminal											ExtendsDecl, ImplementsDecl;
nonterminal											InterfaceDecl, InterfaceReg;

nonterminal											MethodDeclList;
nonterminal	rs.etf.pp1.symboltable.concepts.Obj		MethodDecl, MethodPrototype;
nonterminal rs.etf.pp1.symboltable.concepts.Obj		MethodReg;
nonterminal	rs.etf.pp1.symboltable.concepts.Struct	MethodType;

nonterminal											Params, ParamList;
nonterminal	rs.etf.pp1.symboltable.concepts.Obj		Param;
nonterminal											Args, ArgList;
nonterminal											Arg;

nonterminal rs.etf.pp1.symboltable.concepts.Obj		Designator;

nonterminal											StatementList;
nonterminal											Statement, DesignatorStatement;

nonterminal											LParenCondition;
nonterminal											IfCondition, Else;
nonterminal											ForInit, ForCondition, ForStep;

nonterminal											PrintSpace;

nonterminal	rs.etf.pp1.symboltable.concepts.Struct	Condition, CondTerm, CondFact;

nonterminal rs.etf.pp1.symboltable.concepts.Struct	Expr, Term, Factor;

nonterminal											FuncCall;
nonterminal											Callee;

nonterminal Integer									Relop;
nonterminal											Addop, Mulop;
nonterminal											Unaryop;

// #===# [E] NON TERMINALS #===#

precedence left ELSE;

Program ::= (ProgramNode) ProgDecl:decl SectionsDecl LBRACE MethodDeclList RBRACE;
ProgDecl ::= (ProgDeclNode) PROG IDENT:progName;

ConstValue ::=
	(IntConstNode) INT:value
	|
	(CharConstNode) CHAR:value
	|
	(BoolConstNode) BOOL:value
	;

SectionsDecl ::= (SectionNode) SectionsDecl Section | (EmptySectionNode) /* epsilon */;
Section ::=
	(ConstSectionNode) ConstSect
	|
	(VarSectionNode) VarSect
	|
	(EnumSectionNode) EnumDecl
	|
	(ClassSectionNode) ClassDecl
	|
	(InterfaceSectionNode) InterfaceDecl
	;

Type ::= (TypeNode) IDENT:typeName;
ArrayType ::= (ArrayTypeNode) LBRACKET RBRACKET | (NonArrayTypeNode) /* epsilon */;
ArraySize ::= (ArraySizeNode) LBRACKET Expr RBRACKET | (NonArraySizeNode) /* epsilon */;
Index ::= (IndexingNode) LBRACKET Expr RBRACKET;

ConstSectList ::= (ConstSectListNode) ConstSectList ConstSect | (EmptyConstSectListNode) /* epsilon */;
ConstSect ::= (ConstSectNode) ConstSectDecl ConstDeclList SEMI;
ConstSectDecl ::= (ConstSectDeclNode) CONST Type:constType;
ConstDeclList ::= (ConstListNode) ConstDeclList COMMA ConstDecl | (ConstNode) ConstDecl;
ConstDecl ::= (ConstDeclNode) IDENT:constName EQUAL ConstValue:value;

VarSectList ::= (VarSectListNode) VarSectList VarSect | (EmptyVarSectListNode) /* epsilon */;
VarSect ::= (VarSectNode) VarSectDecl VarDeclList SEMI | (ErrorVarSectNode) error:err SEMI {: parser.report_error("Additional syntax error info: invalid variable declaration specification", null); :};
VarSectDecl ::= (VarSectDeclNode) Type:varType;
VarDeclList ::= (VarListNode) VarDeclList COMMA VarDecl | (VarNode) VarDecl;
VarDecl ::= (VarDeclNode) IDENT:varName ArrayType | (ErrorVarDeclNode) error:err {: parser.report_error("Additional syntax error info: invalid variable declaration specification", null); :};

EnumDecl ::= (EnumNode) EnumReg LBRACE EnumConstDeclList RBRACE;
EnumReg ::= (EnumDeclNode) ENUM IDENT:enumName;
EnumConstDeclList ::= (EnumConstListNode) EnumConstDeclList COMMA EnumConstDecl | (EnumConstNode) EnumConstDecl;
EnumConstDecl ::= (EnumConstDeclNode) IDENT:enumConstName EnumOptValue;
EnumOptValue ::= (EnumValueNode) EQUAL INT:value | (EnumEmptyValueNode) /* epsilon */;

IList ::= (IListNode) IList COMMA InterfaceType | (INode) InterfaceType;
InterfaceType ::= (InterfaceImplementationNode) Type;
IMethodList ::= (IMethodsNode) IMethodList MethodPrototype SEMI | (IEmptyMethodsNode) /* epsilon */;

FieldSectList ::= (FieldSectListNode) FieldSectList FieldSect | (EmptyFieldSectListNode) /* epsilon */ | (ErrorFieldSectListNode) error:err;
FieldSect ::= (FieldSectNode) VarSectDecl VarDeclList SEMI;

ClassDecl ::= (ClassNode) ClassReg ExtendsDecl ImplementsDecl LBRACE ClassBody RBRACE;
ClassReg ::= (ClassDeclNode) CLASS IDENT:className;
ClassBody ::= (StructBodyNode) FieldSectList | (ClassBodyNode) FieldSectList LBRACE MethodDeclList RBRACE;
ExtendsDecl ::= (ClassExtendsNode) EXTENDS Type | (ClassEmptyExtendsNode) /* epsilon */ | (ErrorClassExtendsNode) error:err;// {: parser.report_error("Additional syntax error info: invalid extends declaration", null); :};
ImplementsDecl ::= (ClassImplementsNode) IMPLEMENTS IList | (ClassEmptyImplementsNode) /* epsilon */;
InterfaceDecl ::= (InterfaceNode) InterfaceReg LBRACE IMethodList RBRACE;
InterfaceReg ::= (InterfaceDeclNode) INTERFACE IDENT:interfaceName;

MethodDeclList ::= (MethodListNode) MethodDeclList MethodDecl | (EmptyMethodListNode) /* epsilon */;
MethodDecl ::= (MethodNode) MethodPrototype VarSectList LBRACE StatementList RBRACE;
MethodPrototype ::= (MethodPrototypeNode) MethodReg LPAREN Params RPAREN;
MethodReg ::= (MethodDeclNode) MethodType IDENT:methodName;
MethodType ::= (TypedMethodNode) Type:retType | (VoidMethodNode) VOID;

Params ::= (ParamsNode) ParamList | (EmptyParamsNode) /* epsilon */;
ParamList ::= (ParamListNode) ParamList COMMA Param | (ParamNode) Param;
Param ::= (ParamDeclNode) Type:paramType IDENT:paramName ArrayType | (ErrorParamDeclNode) error:err {: parser.report_error("Additional syntax error info: invalid parameter specification", null); :};

Args ::= (ArgsNode) ArgList | (EmptyArgsNode) /* epsilon */;
ArgList ::= (ArgListNode) ArgList COMMA Arg | (ArgNode) Arg;
Arg ::= (ArgDeclNode) Expr;

Designator ::=
	(DesignatorChainNode) Designator DOT IDENT:chainedDesignatorName
	|
	(DesignatorIndexingNode) Designator Index
	|
	(DesignatorNode) IDENT:name
	;

DesignatorStatement ::=
	(AssignmentNode) Designator EQUAL Expr
	|
	(CallNode) FuncCall
	|
	(IncrementNode) Designator INC
	|
	(DecrementNode) Designator DEC
	;

LParenCondition ::= (LParenConditionNode) LPAREN Condition | (ErrorLParenConditionNode) error:err {: parser.report_error("Additional syntax error info: invalid if statement", null); :};
IfCondition ::= (IfConditionNode) IF LParenCondition RPAREN;
Else ::= (ElseNode) ELSE;

ForInit ::= (ForInitNode) DesignatorStatement | (EmptyForInitNode) /* epsilon */;
ForCondition ::= (ForConditionNode) Condition | (EmptyForConditionNode) /* epsilon */;
ForStep ::= (ForStepNode) DesignatorStatement | (EmptyForStepNode) /* epsilon */;

StatementList ::= (StatementListNode) StatementList Statement | (EmptyStatementListNode) /* epsilon */;
Statement ::=
	(IfNode) IfCondition Statement
	|
	(IfElseNode) IfCondition Statement Else Statement
	|
	(ForNode) FOR LPAREN ForInit SEMI ForCondition SEMI ForStep RPAREN Statement
	|
	(BlockNode) LBRACE StatementList RBRACE
	|
	(DesignatorStatementNode) DesignatorStatement SEMI
	|
	(PrintNode) PRINT LPAREN Expr PrintSpace RPAREN SEMI
	|
	(ReadNode) READ LPAREN Designator RPAREN SEMI
	|
	(BreakNode) BREAK SEMI
	|
	(ContinueNode) CONTINUE SEMI
	|
	(ReturnExprNode) RETURN Expr SEMI
	|
	(ReturnVoidNode) RETURN SEMI
	|
	(ErrorStatement) error:err SEMI {: parser.report_error("Additional syntax error info: statement is not valid", null); :}
	;

PrintSpace ::= (PrintSpaceNode) COMMA INT:value | (DefaultPrintSpaceNode) /* epsilon */;

Condition ::= (ConditionOrNode) Condition OR CondTerm | (ConditionNode) CondTerm;
CondTerm ::= (CondTermAndNode) CondTerm AND CondFact | (CondTermNode) CondFact;
CondFact ::= (RelCondFactNode) Expr:lexpr Relop Expr:rexpr | (CondFactNode) Expr;

Expr ::= (AddExprNode) Expr Addop Term | (ExprNode) Unaryop Term;
Term ::= (MulTermNode) Term Mulop Factor | (TermNode) Factor;
Factor ::=
	(ConstantFactorNode) ConstValue
	|
	(VariableFactorNode) Designator
	|
	(CallFactorNode) FuncCall
	|
	(NewNode) NEW Type ArraySize
	|
	(NullNode) NULL
	|
	(PriorityFactorNode) LPAREN Expr RPAREN
	|
	(ErrorFactorNode) error:err {: parser.report_error("Additional syntax error info: expression is not valid", null); :}
	;

FuncCall ::= (FuncCallNode) Callee LPAREN Args RPAREN;
Callee ::= (CalleeNode) Designator:calleeName;

Relop ::=
	EQU	{: RESULT = Code.eq; :}
	|
	NEQ	{: RESULT = Code.ne; :}
	|
	GTR	{: RESULT = Code.gt; :}
	|
	GEQ	{: RESULT = Code.ge; :}
	|
	LSS	{: RESULT = Code.lt; :}
	|
	LEQ	{: RESULT = Code.le; :}
	;
Addop ::=
	(PlusNode) PLUS
	|
	(MinusNode) MINUS
	;
Mulop ::=
	(MultiplyNode) MULTIPLY
	|
	(DivideNode) DIVIDE
	|
	(ModuloNode) MODULO
	;

Unaryop ::= (UnaryMinusNode) MINUS | (UnaryPlusNode) /* epsilon */;
