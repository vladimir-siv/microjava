package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;


parser code
{:
	boolean errorDetected = false;

	Logger log = Logger.getLogger(getClass());

	public void report_fatal_error(String message, Object info) throws java.lang.Exception
	{
		done_parsing();
		report_error(message, info);
	}

	public void syntax_error(Symbol cur_token)
	{
		report_error("Syntax error", cur_token);
	}

	public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception
	{
		report_fatal_error("Fatal error, parsing cannot continue", cur_token);
	}

	public void report_error(String message, Object info)
	{
		errorDetected = true;

		StringBuilder msg = new StringBuilder(message);

		if (info instanceof Symbol)
		{
			msg
				.append(" on line ")
				.append(((Symbol)info).left);
		}

		log.error(msg.toString());
	}

	public void report_info(String message, Object info)
	{
		StringBuilder msg = new StringBuilder(message);

		if (info instanceof Symbol)
		{
			msg
				.append (" on line ")
				.append(((Symbol)info).left);
		}

		log.info(msg.toString());
	}

:}

init with
{:
	errorDetected = false;
:}

scan with
{:
	Symbol s = this.getScanner().next_token();

	//if (s != null && s.value != null)
	//{
	//	log.info(s.toString() + " " + s.value.toString());
	//}

	return s;
:}

// Keywords
terminal PROG, PRINT, RETURN;
// Constants
terminal Integer NUMBER;
// Identifiers
terminal String IDENT;
// Operators
terminal PLUS, EQUAL;
terminal COMMA, SEMI;
terminal LPAREN, RPAREN;
terminal LBRACE, RBRACE;
// Control
terminal IF, ELSE;
// Void
terminal VOID;

nonterminal rs.etf.pp1.symboltable.concepts.Obj Program, ProgDecl, MethodDecl, MethodReg, Designator;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type, VarDeclList, Expr, Term, Factor, FuncCall;

nonterminal MethodDeclList, VarDecl;
nonterminal Params, ParamList, Param, Args, ArgList;
nonterminal StatementList, Statement;
nonterminal Unmatched, Matched;
nonterminal Op;

Program ::= (ProgramNode) PROG ProgDecl:decl VarDeclList LBRACE MethodDeclList RBRACE;
ProgDecl ::= (ProgDeclNode) IDENT:progName;

VarDeclList ::= (VarListNode) VarDeclList VarDecl | (EmptyVarListNode) /* epsilon */;
VarDecl ::= (VarDeclNode) Type:varType IDENT:varName SEMI;

Type ::= (TypeNode) IDENT:typeName;

MethodDeclList ::= (MethodListNode) MethodDeclList MethodDecl | (EmptyMethodListNode) /* epsilon */;
MethodDecl ::= (MethodNode) MethodReg LPAREN Params RPAREN VarDeclList LBRACE StatementList RBRACE;
MethodReg ::= (MethodDeclNode) Type:retType IDENT:methodName;

Params ::= (ParamsNode) ParamList | (EmptyParamsNode) /* epsilon */;
ParamList ::= (ParamListNode) ParamList COMMA Param | (ParamNode) Param;
Param ::= (ParamDeclNode) Type IDENT;

Args ::= (ArgsNode) ArgList | (EmptyArgsNode) /* epsilon */;
ArgList ::= (ArgListNode) ArgList COMMA Expr | (ArgNode) Expr;

StatementList ::= (StatementListNode) StatementList Statement | (EmptyStatementListNode) /* epsilon */;
Statement ::= (MatchedStmtNode) Matched | (UnmachedStmtNode) Unmatched | (ErrorStatement) error SEMI;

Designator ::= (DesignatorNode) IDENT:name;

Unmatched ::= (UnmatchedIfNode) IF LPAREN Expr RPAREN Statement | (UnmatchedIfElseNode) IF LPAREN Expr RPAREN Matched ELSE Unmatched;
Matched ::=
	(MatchedIfNode) IF Expr Matched ELSE Matched
	|
	(AssignmentNode) Designator:dest EQUAL Expr:expr SEMI
	|
	(PrintNode) PRINT LPAREN Expr RPAREN SEMI
	|
	(ReturnExprNode) RETURN Expr:expr SEMI
	|
	(ReturnVoidNode) RETURN SEMI
	|
	(CallNode) FuncCall SEMI
	;

Expr ::=
	(OpExprNode) Expr:expr Op Term:term
	|
	(TermExprNode) Term:term
	;

Term ::= (FactorNode) Factor:factor;
Factor ::=
	(ConstantFactorNode) NUMBER
	|
	(VariableFactorNode) Designator:designator
	|
	(CallFactorNode) FuncCall
	;

FuncCall ::= (FuncCallNode) Designator:callee LPAREN Args RPAREN;

Op ::= (AddopNode) PLUS ;
